%%==============================================================================%%
%%                  BATCH TRACKING GUI FOR DSI STUDIO: PRIMARY ROI							%%
%%==============================================================================%%

%  
% primary_roi.m
% 
% This GUI is designed for batch tracking in DSI studio. In this verison, the user selects one
% primary ROI, and tracking is performed between the primary ROI and all others selected.
%

% ===================================================================================== %
% = XXXXXXXXXXXXXXXXXXXXXXXXXXX DO NOT EDIT CODE BELOW XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX = %
% = 						  						 Code generated by GUIDE															  = %

function varargout = primary_roi(varargin)
  % PRIMARY_ROI M-file for primary_roi.fig
  %      PRIMARY_ROI, by itself, creates a new PRIMARY_ROI or raises the existing
  %      singleton*.
  %
  %      H = PRIMARY_ROI returns the handle to a new PRIMARY_ROI or the handle to
  %      the existing singleton*.
  %
  %      PRIMARY_ROI('CALLBACK',hObject,eventData,handles,...) calls the local
  %      function named CALLBACK in PRIMARY_ROI.M with the given input arguments.
  %
  %      PRIMARY_ROI('Property','Value',...) creates a new PRIMARY_ROI or raises the
  %      existing singleton*.  Starting from the left, property value pairs are
  %      applied to the GUI before primary_roi_OpeningFcn gets called.  An
  %      unrecognized property name or invalid value makes property application
  %      stop.  All inputs are passed to primary_roi_OpeningFcn via varargin.
  %
  %      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
  %      instance to run (singleton)".
  %
  % See also: GUIDE, GUIDATA, GUIHANDLES
  
  % Edit the above text to modify the response to help primary_roi
  
  % Last Modified by GUIDE v2.5 19-Feb-2012 18:44:58
  
  %%%  BEGIN INITIALIZATION CODE: DO NOT EDIT   %%%
  gui_Singleton = 1;
  gui_State = struct('gui_Name',       mfilename, ...
                    'gui_Singleton',  gui_Singleton, ...
                    'gui_OpeningFcn', @primary_roi_OpeningFcn, ...
                    'gui_OutputFcn',  @primary_roi_OutputFcn, ...
                    'gui_LayoutFcn',  [] , ...
                    'gui_Callback',   []);
  if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
  end

  if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
  else
    gui_mainfcn(gui_State, varargin{:});
  end
%%%   END INITIALIZATION CODE   %%%

% = XXXXXXXXXXXXXXXXXXXXXXXXXXX END DO NOT EDIT SECTION XXXXXXXXXXXXXXXXXXXXXXXXXXXXX = %
% ===================================================================================== %

% ===================================================================================== %
% =																	 OPENING FUNCTION 									  						=	%
% =										Executes just before primary_roi is made visible.								=	%
% ===================================================================================== %

function primary_roi_OpeningFcn(hObject, eventdata, handles, varargin)

	% ------------------------------ GENERATED BY GUIDE ------------------------------- %
	% Choose default command line output for roi_pairs

  handles.output = hObject;
  
  % Update handles structure
  guidata(hObject, handles);
  
  
  % UIWAIT makes primary_roi wait for user response (see UIRESUME)
  % uiwait(handles.figure1);
	% --------------------------------------------------------------------------------- %
  
	% Makes it easier to store and retrieve data from GUI throughout script
  setappdata(0, 'hMainGui', gcf);
	% Allows storage of variables in GUI for use in other functions
  hMainGui = getappdata(0, 'hMainGui');
  
  % Check to see whether the user has previously saved the path to DSI studio
  if exist('extra_files/dsi_studio_path.mat') == 2;
    % They did, so load it in
    load('extra_files/dsi_studio_path.mat', 'dsi_studio_pointer');
    % Set a variable to store the path to DSI studio
    setappdata(hMainGui, 'dsi_studio_pointer', dsi_studio_pointer);
    % Set the text display in the GUI so that it shows the path
    set(handles.display_dsi_studio, 'string', dsi_studio_pointer);
  end
	
  % Set up variables that will be used to store information later
  roi_pairs         = {};
  roi2files         = {};
  roipath           = [];
  roi2path          = [];
  roi_outputnames   = {};
  roi_pairs_names   = {};
  output_list       = {};
  default_directory = [];
  original_path     = pwd;

	% Save variables so they can be accessed from other functions
  % If you don't do this, other functions have no knowledge of the variables just defined above
  setappdata(hMainGui, 'roi_pairs', roi_pairs);
  setappdata(hMainGui, 'roi2files', roi2files);
  setappdata(hMainGui, 'roi_outputnames', roi_outputnames);
  setappdata(hMainGui, 'roi_pairs_names', roi_pairs_names);
  setappdata(hMainGui, 'output_list', output_list);
  setappdata(hMainGui, 'original_path', original_path);

%%===============================================================     OUTPUT FUNCTION
% ------------------------------ GENERATED BY GUIDE ------------------------------- %
% ------ Outputs from this function are returned to the command line. ------ %
function varargout = primary_roi_OutputFcn(hObject, eventdata, handles)

  % Get default command line output from handles structure
  varargout{1} = handles.output;
% --------------------------------------------------------------------

% ===================================================================================== %
% = 		 									 						FILE PATHS																		  =	%
% = 		 		Functions for setting, displaying, and clearing tracking file paths				= %
% ===================================================================================== %

%%==================================================================     DSI STUDIO
% ------ Function executes when dsi_studio_button is pressed. ------ %
% ------ Sets path for DSI studio application. ------ %

function pushbutton_dsi_studio_Callback(hObject, eventdata, handles)
  
	% Get any information currently stored in GUI;
  hMainGui = getappdata(0, 'hMainGui');
    % This line of code is at the beginning of almost every function; 
  	% It facilitates storing new variables and retrieving variables that have
    % been created in another function

	% Open file browser window (uigetfile); 
	% Limit selectable files to those that have a .exe extension (*.exe)
	% Set variables [dsi_studio, dsi_studio_path] to the filename and path
  [dsi_studio, dsi_studio_path] = uigetfile('*.exe','Select DSI Studio'); % Path for DSI Studio
	
  % Concatenate file name and path into one string (for sending to DSI Studio)
  dsi_studio_pointer = sprintf('%s%s',dsi_studio_path,dsi_studio);
  
	% Store the dsi_studio_pointer variable in the GUI.
  setappdata(hMainGui, 'dsi_studio_pointer', dsi_studio_pointer);
  	% Without this line of code, dsi_studio_pointer will not be accessible from other functions
  
	% Display the path in the display_dsi_studio box in the GUI
  set(handles.display_dsi_studio, 'string', dsi_studio);

% --- Executes on button press in checkbox_default_dsi_studio.
function checkbox_default_dsi_studio_Callback(hObject, eventdata, handles)

%%===========================================================     SEED FILE
% ------ Function executes when seed_file_button is pressed. ------ %
% ------ Sets path for seed file. ------ %
% ------ See dsi_studio_button_Callback function for comments ------ %

function pushbutton_seed_file_Callback(hObject, eventdata, handles)

  hMainGui = getappdata(0, 'hMainGui');
  
  [seed, seedpath] = uigetfile('*.nii','Select the seed file'); % Path for the seed file
  seedfile = sprintf('%s%s',seedpath,seed);
  
  setappdata(hMainGui, 'seedfile', seedfile);
  set(handles.display_seed_file, 'string', seed);

%%============================================================     FIB FILE
% ------ Function executes when fib_file_button is pressed. ------ %
% ------ Sets path for fib file. ------ %
% ------ See dsi_studio_button_Callback function for comments ------ %

function pushbutton_fib_file_Callback(hObject, eventdata, handles)

  hMainGui = getappdata(0, 'hMainGui');
  
  [fib, fibpath] = uigetfile('*.fib.gz','Select the .fib file'); % Path for .fib file
  fibfile = sprintf('%s%s',fibpath,fib);
  
  setappdata(hMainGui, 'fibfile', fibfile);
  set(handles.display_fib_file, 'string', fib);

%%====================================================     OUTPUT FILE DIRECTORY
% ------ Function executes when outputdirectory_button is pressed. ------ %
% ------ Sets path for output file. ------ %

function pushbutton_outputfile_Callback(hObject, eventdata, handles)

  % Get any information currently stored in GUI;
	hMainGui   = getappdata(0, 'hMainGui');
	output_dir = getappdata(hMainGui, 'output_dir');

  % Open a file selection dialog to get path of desired output directory, limit selectable items to folders only
	directory  = uigetdir('*.*','Select location for output file'); % Specifies location for output file
  % Setup a regular expression to check whether the folder the user picked contains spaces
  spaces_finder = regexp(directory, '\s');
  % Check if the directory they picked contains spaces
	if isequal(length(spaces_finder), 0);
    % It doesn't, so set output_dir to the path they chose
		output_dir = cat(1, output_dir, directory);
    % setappdata so we can access output_dir from other functions
		setappdata(hMainGui, 'output_dir', output_dir);
    % Display the path in the display_outputdir static text field in the GUI
		set(handles.display_outputdir, 'string', output_dir);
	else
    % The directory contained spaces, so display an error message and tell them to pick another folder that doesn't contain spaces
		msgbox('The path to the output directory may not contain spaces. Please select a different path, or modify the directory names in the desired path so they do not contain spaces.', 'Directory Path Cannot Contain Spaces', 'warn');
	end

%%================================================================    PRIMARY ROI
% ------ Function executes when pushbutton_primary_roi is pressed. ------ %
% ------ Opens file selector window for user to select primary ROI. ------ %

function pushbutton_primary_roi_Callback(hObject, eventdata, handles)

	hMainGui = getappdata(0, 'hMainGui');
	roi2path = getappdata(hMainGui, 'roi2path');
	
  % Ask user to select a file to be used as the primary ROI during tracking
	[roifile, roipath] = uigetfile('*.nii','Select primary ROI file');
  % Do the following as long as the user didn't click cancel
  if ~isequal(roifile, 0);
    % If the user has already selected other ROI files using the Add ROI files button, make sure that
    % the primary ROI file that they selected is in the same folder as the other ROI files.
		if (length(roi2path) > 0) & strcmp(roi2path, roipath) == 0;
      % They are not in the same directory, so display an error message box
			msgbox('The path for file selected to be the primary ROI file is different than the paths for the additional ROIs. Primary ROI file must be in the same folder as additional ROIs in order to perform tracking', 'Different File Paths!', 'warn');
		else
      % They are in the same directory, so setup variables for the selected primary ROI file
		  primary_roi = sprintf('%s%s',roipath,roifile);
  		primary_roi_filename = roifile;
      [pathstr, primary_roi_outputname, ext] = fileparts(primary_roi);

	    % Set variables so they are accessible from other functions
	    setappdata(hMainGui, 'primary_roi', primary_roi);
	    setappdata(hMainGui, 'primary_roi_filename', primary_roi_filename);
	    setappdata(hMainGui, 'primary_roi_outputname', primary_roi_outputname);
	    setappdata(hMainGui, 'default_directory', roipath);
	    setappdata(hMainGui, 'roipath', roipath);
	    set(handles.display_primary_roi, 'string', roifile);	
    end
  end

%%================================================================     OTHER ROI FILES
% ------ Function executes when pushbutton_add_ROI is pressed. ------ %
% ------ Opens file selector window for user to select additional ROI files. ------ %

function pushbutton_add_ROI_Callback(hObject, eventdata, handles)

	hMainGui          = getappdata(0, 'hMainGui');
	default_directory = getappdata(hMainGui, 'default_directory');
	roi2files         = getappdata(hMainGui, 'roi2files');
	roipath           = getappdata(hMainGui, 'roipath');

  % Display a file selection dialog and ask them to choose ROI files
	[selected_files, roi2path] = uigetfile('*.nii','Select second ROI file', default_directory, 'Multiselect', 'on');
  
  % Do the following as long as the user did not click cancel
  if ~isequal(selected_files, 0);
    % If the user has already selected a primary ROI file, and the files they just selected are in a different folder, display an error message box
    if (length(roipath) > 0) & (strcmp(roi2path, roipath) == 0);
    	msgbox('The path for the selected file(s) is different than the path for the primary ROI. Files must be in the same folder in order to perform tracking', 'Different File Paths!', 'warn');
    % The files they chose are in the same directory
    % proceed by checking if they selected multiple files or just one file
    elseif iscell(selected_files);
      % They selected multiple files, so add all of them to the roi2files array and transpose them
  		roi2files = cat(1, roi2files, selected_files(:));
  	else
      % They only selected one file, so only add one to the roi2files array
  		roi2files = cat(1, roi2files, selected_files);
    end
    % Set data so it's accessible from other functions
		setappdata(hMainGui, 'roi2files', roi2files);
		setappdata(hMainGui, 'roi2path', roi2path);
		set(handles.listbox, 'string', roi2files);
  end
    
% --- Executes on selection change in listbox.
function listbox_Callback(hObject, eventdata, handles)

% --- Executes during object creation, after setting all properties.
function listbox_CreateFcn(hObject, eventdata, handles)

  if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
      set(hObject,'BackgroundColor','white');
  end

% ===================================================================================== %
% = 													    TRACKING PARAMETERS								  								=	%
% = 											Functions related to parameters input boxes					  			= %
% ===================================================================================== %

% -------------------------------- GENERATED BY GUIDE --------------------------------- %
%%===============================================================     SEED COUNT

function seed_count_input_Callback(hObject, eventdata, handles)	
% --- Executes during object creation, after setting all properties.
function seed_count_input_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%%=============================================================     FA THRESHOLD
function fa_thresh_input_Callback(hObject, eventdata, handles)
% --- Executes during object creation, after setting all properties.
function fa_thresh_input_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%%================================================================     STEP SIZE
function step_size_input_Callback(hObject, eventdata, handles)
% --- Executes during object creation, after setting all properties.
function step_size_input_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%%============================================================     TURNING ANGLE
    function turning_angle_input_Callback(hObject, eventdata, handles)
% --- Executes during object creation, after setting all properties.
        function turning_angle_input_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%%================================================================     SMOOTHING
function smoothing_input_Callback(hObject, eventdata, handles)
% --- Executes during object creation, after setting all properties.
function smoothing_input_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%%===================================================================     MIN
function min_input_Callback(hObject, eventdata, handles)
% --- Executes during object creation, after setting all properties.
function min_input_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%%======================================================================     MAX
function max_input_Callback(hObject, eventdata, handles)
% --- Executes during object creation, after setting all properties.
function max_input_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%%=============================================================     THREAD COUNT
function thread_count_input_Callback(hObject, eventdata, handles)
% --- Executes during object creation, after setting all properties.
function thread_count_input_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


%%==========================================================     CLEAR ROI FILE
% ------ Function executes when clear_button is pressed. ------ %
% PURPOSE: This function enables the user to select an item in the list of ROI files displayed in the GUI, 
% and clear it if they decide they don't want to perform tracking with that file

% --- Executes on button press in pushbutton_clear.
function clear_button_Callback(hObject, eventdata, handles)

	hMainGui     = getappdata(0, 'hMainGui');
  % Get the list of files they've already chosen
  roi2files    = getappdata(hMainGui, 'roi2files');
  % Get the item currently selected in the list in the GUI
	item_selected = get(handles.listbox, 'Value');
  % Clear that item from the array roi2files
	roi2files(item_selected, :) = [];
	
  % Make it so that when the list reloads, the item selected (highlighted in blue) will be the first item in the list
	set(handles.listbox, 'Value', 1);
  % Set the roi2files array to the updated info (everything minutes the one they cleared)
	setappdata(hMainGui, 'roi2files', roi2files);
  % Display the new file list in the GUI
	set(handles.listbox, 'string', roi2files);
	
%%======================================================     CLEAR ALL ROI FILES
% ------ Function executes when clear_all_button is pressed. ------ %
% PURPOSE: Enables user to clear all ROI files they've chosen so far
% in the event that they want to start over

function clear_all_button_Callback(hObject, eventdata, handles)	

	hMainGui  = getappdata(0, 'hMainGui');
	roi2files = getappdata(hMainGui, 'roi2files');
  
  % Since they're potentially clearing a lot of files they've chosen, ask if they're sure they want to clear
	confirm_clear = questdlg('Are you sure you want to clear all ROI files?', 'Confirm Request to Clear ROI Files', 'Yes');
  
  % If they click yes, clear the roi2files array
	if isequal(confirm_clear, 'Yes');
		roi2files = {};
	end

  % Set selected item in listbox to first line
	set(handles.listbox, 'Value', 1);
  % Setappdata as usual
	setappdata(hMainGui, 'roi2files', roi2files);
  % Set the listbox to display roi2files, which is now empty
	set(handles.listbox, 'string', roi2files);
		
% ===================================================================================== %
% = 													    START TRACKING								      								=	%
% = 					Functions executed when the user clicks start tracking					  			= %
% ===================================================================================== %

% --- Executes on button press in pushbutton_start_tracking.
function pushbutton_start_tracking_Callback(hObject, eventdata, handles)

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   GET ALL DATA FROM GUI   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  hMainGui               = getappdata(0, 'hMainGui');
  dsi_studio_pointer     = getappdata(hMainGui, 'dsi_studio_pointer');
  seedfile               = getappdata(hMainGui, 'seedfile');
  fibfile                = getappdata(hMainGui, 'fibfile');
  seed_count             = str2num(strrep(get(handles.seed_count_input, 'string'), ',', ''));
  fa_threshold           = str2num(get(handles.fa_thresh_input, 'string'));
  step_size              = str2num(get(handles.step_size_input, 'string'));
  smoothing              = str2num(get(handles.smoothing_input, 'string'));
  turning_angle          = str2num(get(handles.turning_angle_input, 'string'));
  min_length             = str2num(get(handles.min_input, 'string'));
  max_length             = str2num(get(handles.max_input, 'string'));
  thread_count           = str2num(get(handles.thread_count_input, 'string'));
  roi_pairs              = getappdata(hMainGui, 'roi_pairs');
  output_list            = getappdata(hMainGui, 'output_list');
  output_dir             = getappdata(hMainGui, 'output_dir');
  primary_roi            = getappdata(hMainGui, 'primary_roi');
  primary_roi_filename   = getappdata(hMainGui, 'primary_roi_filename');
  primary_roi_outputname = getappdata(hMainGui, 'primary_roi_outputname');
  roi_pairs_names        = getappdata(hMainGui, 'roi_pairs_names');
  roipath                = getappdata(hMainGui, 'roipath');
  roi_outputnames        = getappdata(hMainGui, 'roi_outputnames');
  roi2files              = getappdata(hMainGui, 'roi2files');
  roi_pairs              = getappdata(hMainGui, 'roi_pairs');
  original_path          = getappdata(hMainGui, 'original_path');
  
  % Collect information the user needed to input so that we can check to make sure they gave us everything we need to send to DSI studio
  requiredInfo = struct('dsiStudio', dsi_studio_pointer, 'seed_file', seedfile, 'fib_file', fibfile, 'seed_count', seed_count, 'FA_threshold', fa_threshold, 'step_size', step_size, 'smoothing_value', smoothing, 'turning_angle', turning_angle, 'min_length', min_length, 'max_length', max_length, 'thread_count', thread_count, 'primary_roi', primary_roi, 'output_dir', output_dir);

  % If any of the required fields are empty, go through the list and check which items are empty
  if (arrayfun(@(field) any(structfun(@isempty,field)), requiredInfo)) == 1
    requiredItems = fieldnames(requiredInfo);
    missingItems = {};
    
    for item = 1:length(requiredItems)
      thisItem = requiredItems{item};
      if isempty(requiredInfo.(requiredItems{item}))
        missingItems = cat(1, missingItems, thisItem);
      end
    end
    
    item_list   = strvcat(missingItems);
    error_msg   = strcat('The required item "', item_list, '" was not provided.');
    final_error = strvcat(error_msg, 'Please return to the GUI and provide the missing information.')
    % Tell the user which fields they left blank
  	msgbox(final_error, 'Missing Information!', 'warn');
    % Terminate the program
    return;
  end

  % Check to see if the 'Make Default' checkbox is checked for DSI Studio Path
  if (get(handles.checkbox_default_dsi_studio,'Value') == get(handles.checkbox_default_dsi_studio,'Max'));
    % The box is checked, so make a file to store the path. This will be loaded automatically the next time the GUI is used
    filename = 'dsi_studio_path.mat';
    full_filename = sprintf('%s/extra_files/%s', original_path, filename);
    save(full_filename, 'dsi_studio_pointer');
  end

  % Output file extension
  if (get(handles.radiobutton_track,'Value') == get(handles.radiobutton_track,'Max'))
  	% Radio button is selected, take appropriate action
  	output_extension = '.trk'
  else
  	% Radio button is not selected, take appropriate action
  	output_extension = '.txt'
  end

  % Go through array of roi2files
  for i = 1:size(roi2files);
    % We used uigetfile in the add_ROI_button callback - since uigetfile returns the file name (i.e. "roi1.nii") and path (i.e. "Users/aUser/Desktop/TrackingFiles")
    % as separate variables, we have to concatenate the strings in order to send the full path to DSI Studio (i.e. "Users/aUser/Desktop/TrackingFiles/roi1.nii")
  	roi2            = sprintf('%s%s',roipath,char(roi2files(i)));
    % We already did that for the primary ROI file when the user selected it, so we can go ahead and make an array of file pairs (with their full paths)
    % It will look like this for the first pair of files added to the array:
    % [Users/aUser/Desktop/TrackingFiles/PRIMARY_ROI.nii Users/aUser/Desktop/TrackingFiles/roi1.nii]
    % As we add pairs, it will look like this:
    % [
      % Users/aUser/Desktop/TrackingFiles/PRIMARY_ROI.nii Users/aUser/Desktop/TrackingFiles/roi1.nii
      % Users/aUser/Desktop/TrackingFiles/PRIMARY_ROI.nii Users/aUser/Desktop/TrackingFiles/roi2.nii
    % ]
  	roi_pairs       = cat(1, roi_pairs, {primary_roi, roi2});
  	roi_pairs_names = cat(1, roi_pairs_names, {primary_roi_filename, roi2files(i)});
    % We want the name of each output file to be "roi1_TO_roi2"
    % Use fileparts to get the name without extension
  	[pathstr, roi2_outputname, ext] = fileparts(char(roi2));
    % Make an array with each ROI file's name without extension, the array will look similar to roi_pairs, but without the full paths
  	roi_outputnames = cat(1, roi_outputnames, {primary_roi_outputname, roi2_outputname});
    % Make a string with the final output name
    output_filename = sprintf('%s_TO_%s%s',primary_roi_outputname,roi2_outputname,output_extension);
    % Make another string with the full output path - this is the path to the output directory plus the final output name
  	output          = sprintf('%s\\%s', char(output_dir), char(output_filename));
    % Add the final output string to a list
  	output_list     = cat(1, output_list, output);
  end
  
  % Move into the output directory
  cd(output_dir);

  %% Setup Output text File %%
  timedate = datestr(now);
  time     = fix(clock);
  hour     = num2str(time(4));
  minute   = num2str(time(5));
  fOut     = strcat('BatchTracking_',date,'-',hour,'-',minute,'_log.txt');
  fid      = fopen(fOut,'a+');

  if fid == -1
  	fprintf(1, 'File Not Opened Properly\n');
  end;

  % Print the settings to the output file
  fprintf(fid, '%s \n', fOut);
  fprintf(fid, '%s\n', datestr(now));
  fprintf(fid, 'Number of Sets of rois to track: %i \n', size(roi_pairs,1));
  fprintf(fid, 'Fib File: %s \n', fibfile);
  fprintf(fid, 'Seed File: %s \n', seedfile);
  fprintf(fid, 'FA Threshold: %4.4f \n', fa_threshold);
  fprintf(fid, 'Step Size: %4.2f mm \n', step_size);
  fprintf(fid, 'Smoothing: %4.2f mm \n', smoothing);
  fprintf(fid, 'Turning Angle: %i \n', turning_angle);
  fprintf(fid, 'Min Length: %i mm \n', min_length);
  fprintf(fid, 'Max Length: %i mm \n', max_length);
  fprintf(fid, 'Thread Count: %i mm \n', thread_count);
  
  fprintf(fid, '------------------------------------------------------------- \n\n');

  starttime = clock;

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   START TRACKING   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  for i = 1:size(roi_pairs, 1)
    % Record info to the text file
    disp('*** BATCH FIBER TRACKING ***');
    fprintf(sprintf('\n\n -- Tracking Set %i of %i -- \n',i,size(roi_pairs,1)));
    fprintf(fid,'\n\n -- Tracking Set %i of %i -- \n',i,size(roi_pairs,1));
    fprintf(fid, 'Tracking Pair: %s \n', char(output_list(i)));
    fprintf(fid, 'Start: %s \n', datestr(now));
    disp(sprintf('Tracking Pair: %s ', char(output_list(i))))
    fprintf(sprintf('Start: %s \n', datestr(now)));

    % Prepare command to send to DSI Studio
    strn = sprintf('!  %s --action=trk --thread_count=%i --source=%s --method=0 --seed=%s --roi=%s --roi2=%s --seed_count=%i --fa_threshold=%i --turning_angle=%i --step_size=%i --smoothing=%i --min_length=%i --max_length=%i --output=%s',dsi_studio_pointer, thread_count, fibfile, seedfile, char(roi_pairs(i)), char(roi_pairs(i, 2)), seed_count, fa_threshold, turning_angle, step_size, smoothing, min_length, max_length, char(output_list(i)));
    tic;
    % Send command to DSI Studio
    eval(strn)
    tend=toc;
      
    % Record Info
    fprintf(fid, 'Command sent to DSI Studio: %s \n', strn);  
    fprintf(fid, 'End: %s \n', datestr(now));
    fprintf(fid, 'Track time: %d min and %2.4f secs \n\n',floor(tend/60),rem(tend,60));
    fprintf(sprintf('Track time: %d min and %2.4f secs \n',floor(tend/60),rem(tend,60)));
    fprintf(sprintf('\n Tracking Set %i Finished! \n',i));
  end

  endtime   = clock;
  totaltime = etime(endtime,starttime);
  
  % Record more info to the text file
  fprintf(fid, '\n\n ** Completed all at: %s **\n', datestr(now));
  fprintf(fid, '** Total time: %d min and %2.4f secs **\n',floor(totaltime/60),rem(totaltime,60));
  fprintf(sprintf('\n\n ** Completed all at: %s **\n', datestr(now)));
  fprintf(sprintf('** Total time: %d min and %2.4f secs **\n',floor(totaltime/60),rem(totaltime,60)));
  fprintf(sprintf('\n\n ALL FINISHED! \n'));
  % Close the text file
  fclose(fid);

% ===================================================================================== %
% = 													    SAVE/LOAD PARAMETERS								      					=	%
% = 					Functions for saving and loading tracking parameters					  			  = %
% ===================================================================================== %

%%==========================================================     SAVE PARAMETERS
% ------ Function executes when save_button is pressed. ------ %
% PURPOSE: This function enables the user to save the parameters entered into the GUI for this tracking
% session to a file that can be loaded into the GUI later (in a new session) - for convenience purposes
% if a user always or usually performs tracking with the same parameters.

function save_button_Callback(hObject, eventdata, handles)

	original_path = getappdata(hMainGui, 'original_path');
  
  % Get the values the user entered in each box. It is necessary to use str2num since the GUI stores numbers as strings
	state.seed_count    = str2num(get(handles.seed_count_input, 'string'));
	state.fa_threshold  = str2num(get(handles.fa_thresh_input, 'string'));
	state.step_size     = str2num(get(handles.step_size_input, 'string'));
	state.smoothing     = str2num(get(handles.smoothing_input, 'string'));
	state.turning_angle = str2num(get(handles.turning_angle_input, 'string'));
	state.min_length    = str2num(get(handles.min_input, 'string'));
	state.max_length    = str2num(get(handles.max_input, 'string'));
	state.thread_count  = str2num(get(handles.thread_count_input, 'string'));
	
  % Display dialog and ask user to input file name for the file that will store the values
	prompt    = {'File name:'};
	dlg_title = 'Enter name for default values set';
	num_lines = 1;
	filename  = inputdlg(prompt,dlg_title,num_lines);
	
  % Make string with the full path for the new file
	default_params_filename = sprintf('%s/extra_files/saved_parameters/%s.mat', original_path, char(filename));
  % Save the file
	save (default_params_filename,'state');

%%==========================================================     LOAD PARAMETERS
% ------ Function executes when load_button is pressed. ------ %
% PURPOSE: This function loads values stored in an external file saved through the GUI in a previous session.
% Values in the file are set in the GUI for the current tracking session.

function load_button_Callback(hObject, eventdata, handles)
  
  % Get the saved parameters file
  [defaults_file, defaults_filepath] = uigetfile('extra_files/saved_parameters','Select file to load saved defaults');
  % Make a string with the full path to the file
  defaults = sprintf('%s%s',defaults_filepath,defaults_file);
  % Load the file
  load(defaults);
  % Set the GUI input boxes to display the values in the saved parameters file
  set(handles.seed_count_input, 'string', state.seed_count);
  set(handles.fa_thresh_input, 'string', state.fa_threshold);
  set(handles.step_size_input, 'string', state.step_size);
  set(handles.smoothing_input, 'string', state.smoothing);
  set(handles.turning_angle_input, 'string', state.turning_angle);
  set(handles.min_input, 'string', state.min_length);
  set(handles.max_input, 'string', state.max_length);
  set(handles.thread_count_input, 'string', state.thread_count);
  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   CLOSE GUI   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% --- Executes when user attempts to close figure1.
function figure1_CloseRequestFcn(hObject, eventdata, handles)

  delete(hObject);
